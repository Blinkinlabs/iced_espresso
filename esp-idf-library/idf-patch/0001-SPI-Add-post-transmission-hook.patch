From 7a918c0a31ed7df91dae794db12efeeeda51ab9b Mon Sep 17 00:00:00 2001
From: Matt Mets <matt@blinkinlabs.com>
Date: Thu, 24 Jun 2021 18:22:21 +0200
Subject: [PATCH] SPI: Add post-transmission hook

---
 components/driver/include/driver/spi_master.h |  1 +
 components/driver/spi_master.c                | 14 ++++++++++----
 2 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/components/driver/include/driver/spi_master.h b/components/driver/include/driver/spi_master.h
index e6ed8c5a0..7b2b38be6 100644
--- a/components/driver/include/driver/spi_master.h
+++ b/components/driver/include/driver/spi_master.h
@@ -51,6 +51,7 @@ extern "C"
   */
 #define SPI_DEVICE_NO_DUMMY                (1<<6)
 #define SPI_DEVICE_DDRCLK                  (1<<7)
+#define SPI_DEVICE_DISCARD_AFTER_POST      (1<<8)  ///< Don't return the descriptor to the host on completion (use post_cb to notify instead)
 
 
 typedef struct spi_transaction_t spi_transaction_t;
diff --git a/components/driver/spi_master.c b/components/driver/spi_master.c
index 7eb160cb9..a9c78be66 100644
--- a/components/driver/spi_master.c
+++ b/components/driver/spi_master.c
@@ -574,7 +574,9 @@ static void SPI_MASTER_ISR_ATTR spi_new_trans(spi_device_t *dev, spi_trans_priv_
 
 // The function is called when a transaction is done, in ISR or in the task.
 // Fetch the data from FIFO and call the ``post_cb``.
-static void SPI_MASTER_ISR_ATTR spi_post_trans(spi_host_t *host)
+// Returns true if the transaction was handled by post_cb and can be discarded,
+// or false if the app still needs to be notified via the return queue
+static bool SPI_MASTER_ISR_ATTR spi_post_trans(spi_host_t *host)
 {
     spi_transaction_t *cur_trans = host->cur_trans_buf.trans;
 
@@ -584,6 +586,8 @@ static void SPI_MASTER_ISR_ATTR spi_post_trans(spi_host_t *host)
     if (dev->cfg.post_cb) dev->cfg.post_cb(cur_trans);
 
     host->cur_cs = DEV_NUM_MAX;
+
+    return (dev->cfg.flags & SPI_DEVICE_DISCARD_AFTER_POST);
 }
 
 // This is run in interrupt context.
@@ -615,10 +619,12 @@ static void SPI_MASTER_ISR_ATTR spi_intr(void *arg)
         }
 
         //cur_cs is changed to DEV_NUM_MAX here
-        spi_post_trans(host);
+        if(!spi_post_trans(host)) {
+            //Return transaction descriptor.
+            xQueueSendFromISR(host->device[cs]->ret_queue, &host->cur_trans_buf, &do_yield);
+        }
         // spi_bus_lock_bg_pause(bus_attr->lock);
-        //Return transaction descriptor.
-        xQueueSendFromISR(host->device[cs]->ret_queue, &host->cur_trans_buf, &do_yield);
+
 #ifdef CONFIG_PM_ENABLE
         //Release APB frequency lock
         esp_pm_lock_release(bus_attr->pm_lock);
-- 
2.20.1

